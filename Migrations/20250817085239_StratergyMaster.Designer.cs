// <auto-generated />
using System;
using MarketHunter.WebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarketHunter.WebAPI.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250817085239_StratergyMaster")]
    partial class StratergyMaster
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MarketHunter.WebAPI.Models.InstrumentMaster", b =>
                {
                    b.Property<Guid>("InstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InstrumentCode")
                        .HasColumnType("text");

                    b.Property<string>("InstrumentKey")
                        .HasColumnType("text");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("InstrumentId")
                        .HasName("PK_InstrumentId");

                    b.ToTable("InstrumentMaster");
                });

            modelBuilder.Entity("MarketHunter.WebAPI.Models.StrategyMaster", b =>
                {
                    b.Property<Guid>("StrategyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StrategyDesc")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("StrategyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TimeFrameId")
                        .HasColumnType("uuid");

                    b.HasKey("StrategyId")
                        .HasName("PK_StrategyId");

                    b.HasIndex("TimeFrameId");

                    b.ToTable("StrategyMaster");
                });

            modelBuilder.Entity("MarketHunter.WebAPI.Models.TimeFrameMaster", b =>
                {
                    b.Property<Guid>("TimeFrameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TimeFrameName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TimeFrameId")
                        .HasName("PK_TimeFrameId");

                    b.ToTable("TimeFrameMaster");
                });

            modelBuilder.Entity("MarketHunter.WebAPI.Models.StrategyMaster", b =>
                {
                    b.HasOne("MarketHunter.WebAPI.Models.TimeFrameMaster", "TimeFrame")
                        .WithMany("Strategies")
                        .HasForeignKey("TimeFrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StrategyMaster_TimeFrameMaster");

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("MarketHunter.WebAPI.Models.TimeFrameMaster", b =>
                {
                    b.Navigation("Strategies");
                });
#pragma warning restore 612, 618
        }
    }
}
