// <auto-generated />
using System;
using MarketHunter.WebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarketHunter.WebAPI.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250817121619_FinalMigration")]
    partial class FinalMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MarketHunter.WebAPI.Models.InstrumentMaster", b =>
                {
                    b.Property<Guid>("InstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InstrumentCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("InstrumentKey")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("InstrumentId")
                        .HasName("PK_InstrumentId");

                    b.ToTable("InstrumentMaster");
                });

            modelBuilder.Entity("MarketHunter.WebAPI.Models.StrategyMaster", b =>
                {
                    b.Property<Guid>("StrategyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StrategyDesc")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("StrategyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("TimeFrameId")
                        .HasColumnType("uuid");

                    b.HasKey("StrategyId")
                        .HasName("PK_StrategyId");

                    b.HasIndex("TimeFrameId");

                    b.ToTable("StrategyMaster");
                });

            modelBuilder.Entity("MarketHunter.WebAPI.Models.TimeFrameMaster", b =>
                {
                    b.Property<Guid>("TimeFrameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TimeFrameName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TimeFrameId")
                        .HasName("PK_TimeFrameId");

                    b.ToTable("TimeFrameMaster");
                });

            modelBuilder.Entity("MarketHunter.WebAPI.Models.TradeDetail", b =>
                {
                    b.Property<Guid>("TradeDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TradeMasterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TradeStatusId")
                        .HasColumnType("uuid");

                    b.HasKey("TradeDetailId")
                        .HasName("PK_TradeDetailId");

                    b.HasIndex("TradeMasterId");

                    b.HasIndex("TradeStatusId");

                    b.ToTable("TradeDetail");
                });

            modelBuilder.Entity("MarketHunter.WebAPI.Models.TradeDirection", b =>
                {
                    b.Property<Guid>("TradeDirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TradeDirectionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TradeDirectionId")
                        .HasName("PK_TradeDirectionId");

                    b.ToTable("TradeDirection");
                });

            modelBuilder.Entity("MarketHunter.WebAPI.Models.TradeMaster", b =>
                {
                    b.Property<Guid>("TradeMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("EntryPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<Guid>("FinalTradeStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("PnL")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<double>("StopLossPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<Guid>("StrategyId")
                        .HasColumnType("uuid");

                    b.Property<double>("TargetPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<Guid>("TradeDirectionId")
                        .HasColumnType("uuid");

                    b.HasKey("TradeMasterId")
                        .HasName("PK_TradeMasterId");

                    b.HasIndex("FinalTradeStatusId");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("StrategyId");

                    b.HasIndex("TradeDirectionId");

                    b.ToTable("TradeMaster");
                });

            modelBuilder.Entity("MarketHunter.WebAPI.Models.TradeStatusMaster", b =>
                {
                    b.Property<Guid>("TradeStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TradeStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TradeStatusId")
                        .HasName("PK_TradeStatusId");

                    b.ToTable("TradeStatusMaster");
                });

            modelBuilder.Entity("MarketHunter.WebAPI.Models.StrategyMaster", b =>
                {
                    b.HasOne("MarketHunter.WebAPI.Models.TimeFrameMaster", "TimeFrame")
                        .WithMany()
                        .HasForeignKey("TimeFrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StrategyMaster_TimeFrame_TimeFrameId");

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("MarketHunter.WebAPI.Models.TradeDetail", b =>
                {
                    b.HasOne("MarketHunter.WebAPI.Models.TradeMaster", "tradeMaster")
                        .WithMany()
                        .HasForeignKey("TradeMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TradeDetail_TradeMaster_TradeMasterId");

                    b.HasOne("MarketHunter.WebAPI.Models.TradeStatusMaster", "tradeStatusMaster")
                        .WithMany()
                        .HasForeignKey("TradeStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TradeDetail_TradeStatusMaster_Trade");

                    b.Navigation("tradeMaster");

                    b.Navigation("tradeStatusMaster");
                });

            modelBuilder.Entity("MarketHunter.WebAPI.Models.TradeMaster", b =>
                {
                    b.HasOne("MarketHunter.WebAPI.Models.TradeStatusMaster", "tradeStatusMaster")
                        .WithMany()
                        .HasForeignKey("FinalTradeStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TradeMaster_TradeStatusMaster_FinalTradeStatusId");

                    b.HasOne("MarketHunter.WebAPI.Models.InstrumentMaster", "instrumentMaster")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TradeMaster_InstrumentMaster_InstrumentId");

                    b.HasOne("MarketHunter.WebAPI.Models.StrategyMaster", "strategyMaster")
                        .WithMany()
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TradeMaster_StrategyMaster_StrategyId");

                    b.HasOne("MarketHunter.WebAPI.Models.TradeDirection", "tradeDirection")
                        .WithMany()
                        .HasForeignKey("TradeDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TradeMaster_TradeDirection_TradeDirectionId");

                    b.Navigation("instrumentMaster");

                    b.Navigation("strategyMaster");

                    b.Navigation("tradeDirection");

                    b.Navigation("tradeStatusMaster");
                });
#pragma warning restore 612, 618
        }
    }
}
